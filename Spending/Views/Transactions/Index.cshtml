@model TransactionsIndexModel

@{
    ViewBag.Title = "Index";
}

@section head
{
	<style type="text/css">
		#body { width: 1000px; }
		.transactions > table > tbody > tr > td { vertical-align: top; }
		.transactions > table > tbody > tr > td:nth-child(1) { text-align: center; }
		.transactions > table > tbody > tr > td:nth-child(2)  
		{
			max-width: 200px;
			overflow: hidden;
			text-overflow: ellipsis;
		}
		.transactions > table > tbody > tr > td:nth-child(3) { padding: 0px; }
		.transactions > table > tbody > tr > td:nth-child(4),
		.transactions > table > tbody > tr > td.balanceCol { text-align: right; }
		.splitsTable { width: 100%; }
		.splitsTable td { padding: 5px; }
		.splitsTable td:nth-child(1) { width: 150px; }
		.splitsTable td:nth-child(3) { width: 50px; text-align: right; }
		.itemRow .splitsTable td:nth-child(2),
		.itemRow .splitsTable td:nth-child(3) { border-left: 1px solid #F2F2F2; }
		tfoot td { text-align: center; }
	</style>
}

@{
	var currencyFormat = "#,##0.00";
	decimal balance = Model.Account == null ? 0 :
		Model.Account.Balance + Model.Account.Transactions.SelectMany(x => x.Splits).Sum(x => x.Amount);
}

<div class="transactions">
	<table class="styledTable">
		<thead>
			<tr>
				<td colspan="2">@if (Model.Account != null) { @Model.Account.Name } Transactions</td>
				<td colspan="@(Model.Account == null ? 3 : 4)">
					@if (Model.Account != null)
					{
						@Html.ActionLink("Import", "Import", new { accountId = Model.Account.Id }, new { @class = "actionLnk" })
						@Html.ActionLink("Create New", "Create", new { accountId = Model.Account.Id }, new { @class = "actionLnk" })
					}
				</td>
			</tr>
			<tr>
				<td>Date</td>
				<td>Payee</td>
				<td>
					<table class="splitsTable">
		  				<tr>
							<td>Category</td>
							<td>Notes</td>
							<td>Split</td>
						</tr>
					</table>
				</td>
				<td>Amount</td>
				@if (Model.Account != null)
				{
					<td>Balance</td>
				}
				<td></td>
			</tr>
		</thead>
		<tbody>
			@foreach (var transaction in Model.Transactions.OrderBy(x => !x.Pending).ThenByDescending(x => x.Date).ThenByDescending(x => x.DayOrder))
			{
				var date = transaction.Pending ? "Pending" : transaction.Date.ToString("M/d/yy");
				var amount = transaction.Splits.Sum(x => x.Amount);
				var importState =
					transaction.ImportState == (int)ImportState.Added ? "Added" :
					transaction.ImportState == (int)ImportState.Removed ? "Removed" :
					transaction.ImportState == (int)ImportState.Matched ? "Matched" :
					transaction.ImportState == (int)ImportState.Manual ? "Manual" : string.Empty;
			
				<tr class="itemRow">
					<td>@date</td>
					<td>@(transaction.Description == string.Empty ? transaction.OriginalDescription : transaction.Description)</td>
					<td>
						<table class="splitsTable">
							@foreach (var split in transaction.Splits)
							{
								<tr>
									<td>@split.Category.Name</td>
									<td>@split.Notes</td>
									<td>
										@if (transaction.Splits.Count > 1)
										{
											@split.Amount.ToString(currencyFormat)
										}
									</td>
								</tr>
							}
						</table>
					</td>
					<td>@amount.ToString(currencyFormat)</td>
					@if (Model.Account != null)
					{
						<td class="balanceCol">@balance.ToString(currencyFormat)</td>
					}
					<td>
						@Html.ActionLink("Edit", "Edit", "Transactions", new { id = transaction.Id }, null)
						@importState
					</td>
				</tr>
	  
				balance -= amount;
			}
		</tbody>
		<tfoot>
			<tr>
				<td colspan="@(Model.Account == null ? 5 : 6)"">
					@Html.ActionLink("<<", "Index",
						new 
						{
							accountId = Model.Account == null ? 0 : Model.Account.Id,
							startDate = Model.StartDate.ToUrlString(),
							endDate = Model.EndDate.ToUrlString(),
							transactionsPerPage = Model.TransactionsPerPage,
							page = 1
						})
					@Html.ActionLink("<", "Index",
						new 
						{
							accountId = Model.Account == null ? 0 : Model.Account.Id,
							startDate = Model.StartDate.ToUrlString(),
							endDate = Model.EndDate.ToUrlString(),
							transactionsPerPage = Model.TransactionsPerPage,
							page = Model.Page - 1
						})
					@Model.Page of @Model.LastPage
					@Html.ActionLink(">", "Index",
						new 
						{
							accountId = Model.Account == null ? 0 : Model.Account.Id,
							startDate = Model.StartDate.ToUrlString(),
							endDate = Model.EndDate.ToUrlString(),
							transactionsPerPage = Model.TransactionsPerPage,
							page = Model.Page + 1
						})
					@Html.ActionLink(">>", "Index",
						new 
						{
							accountId = Model.Account == null ? 0 : Model.Account.Id,
							startDate = Model.StartDate.ToUrlString(),
							endDate = Model.EndDate.ToUrlString(),
							transactionsPerPage = Model.TransactionsPerPage,
							page = Model.LastPage
						})
				</td>
			</tr>
		</tfoot>
	</table>
</div>

<script type="text/javascript">
	var updateOrderUrl = '@Html.Raw(Url.Action("UpdateDayOrder", "Transactions", new { id = "ID", dayOrder = "ORDER" }))';

	$(function ()
	{
		var fixHelper = function (e, ui)
		{
			ui.children().each(function ()
			{
				$(this).width($(this).width());
			});

			return ui;
		};

		$("#transactions > table > tbody").sortable(
		{
			helper: fixHelper,
			axis: "y",
			stop: function (event, ui)
			{
				var day = ui.item.attr("day");
				var prevItem = ui.item.prev();
				var nextItem = ui.item.next();

				if (day != prevItem.attr("day") && day != nextItem.attr("day"))
				{
					$("#transactions > table > tbody").sortable("cancel");
				}
			},
			update: function (event, ui)
			{
				var currItem = ui.item;
				var prevItem = ui.item.prev();
				var nextItem = ui.item.next();
				var newOrder = 0;

				if (currItem.attr("dayOrder") < prevItem.attr("dayOrder"))
				{
					newOrder = prevItem.attr("dayOrder");
				}
				else
				{
					newOrder = nextItem.attr("dayOrder");
				}

				$.ajax(
				{
					type: "POST",
					url: updateOrderUrl.replace("ID", ui.item.attr("transactionId")).replace("ORDER", newOrder)
				});
			}
		});

		$("#transactions > table > tbody").disableSelection();
	});
</script>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryui")
}
