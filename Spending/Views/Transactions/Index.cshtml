@model TransactionsIndexModel

@{
    ViewBag.Title = "Index";
}

@section head
{
	<style type="text/css">
		#body { padding: 15px; }
		
		#sidebar { width: 225px; float: left; }
		
		#accounts thead td { }
		#accounts thead h2 { margin: 0px; padding: 0px; }
		#accounts tbody td { border-bottom: 3px solid #E1ECF7; background-color: #BCD3E9; }
		.accntsNameCol { width: 118px; text-align: left;  padding: 8px  5px 8px 15px; }
		.accntsBalCol { width:  65px; text-align: right; padding: 8px 15px 8px  5px; }
		
		#transactions { margin-left: 240px; padding: 0px; border: 1px solid #5D8BBA; background-color: White; }
		#transactions > div { padding: 10px; color: White; background-color: #5D8BBA; }
		#transactions > div h2 { margin: 0px; color: White; }
		#transactions > div a { color: White; }
		#transactionsTbl { width: 100%; }
		#transactionsTbl td { vertical-align: top; white-space: nowrap; }
		#transactionsTbl > thead > tr > td { border-color: #BCD3E9; background-color: #BCD3E9; }
		#transactionsTbl > tbody > tr:nth-child(odd) { background-color: #F8F9FD; }
		#transactionsTbl > tbody > tr:nth-child(even) { background-color: #FFFFFF; }

		.transCol > * > tr > td { padding: 5px; border: 1px solid #F2F2F2; }

		.dateCol { text-align: center; }
		.descCol { }
		.splitsCol { padding: 0px; }
		.amtCol { text-align: right; }
		.balanceCol { text-align: right; }
		.stateCol { }
		.cmdCol { }
		
		#transactionsTbl .dateCol { text-align: center; }
		#transactionsTbl .descCol
		{
			max-width: 200px;
			overflow: hidden;
			text-overflow: ellipsis;
		}
		#transactions .splitsCol { padding: 0px; }
		#transactions .amtCol,
		#transactions .balanceCol { text-align: right; }
		
		.splitsTable { width: 100%; }
		.splitsTable td { padding: 5px; }
		.splitsTable .categoryCol { width: 150px; }
		.splitsTable .subAmtCol { width: 50px; text-align: right; }
		
		tbody tbody .notesCol, tbody tbody .subAmtCol { border-left: 1px solid #F2F2F2; }
		
		.pager { text-align: center; }
	</style>
}

@{
	var balance = Model.Account == null ? 0 : Model.Account.Transactions.SelectMany(x => x.Splits).Sum(x => x.Amount);
}

<div id="sidebar">
	@Html.Partial("_Accounts", Model.AccountsInfo)
</div>
<div id="transactions">
	<div>@Html.ActionLink("Create New", "Create")</div>
	<table id="transactionsTbl">
		<thead>
			<tr>
				<td class="dateCol">Date</td>
				<td class="accntCol">Account</td>
				<td class="descCol">Description</td>
				<td class="splitsCol">
					<table class="splitsTable">
		  				<tr>
							<td class="categoryCol">Category</td>
							<td class="notesCol">Notes</td>
							<td class="subAmtCol">Split</td>
						</tr>
					</table>
				</td>
				<td class="amtCol">Amount</td>
				@if (Model.Account != null)
				{
					<td class="balanceCol">Balance</td>
				}
				<td class="stateCol">State</td>
				<td class="cmdCol"></td>
			</tr>
		</thead>
		<tbody>
			@foreach (var transaction in Model.Transactions.OrderBy(x => !x.Pending).ThenByDescending(x => x.Date).ThenByDescending(x => x.DayOrder))
			{
				var date = transaction.Pending ? "Pending" : transaction.Date.ToString("M/d/yy");
				var amount = transaction.Splits.Sum(x => x.Amount);
				var importState =
					transaction.ImportState == (int)ImportState.Added ? "Added" :
					transaction.ImportState == (int)ImportState.Removed ? "Removed" :
					transaction.ImportState == (int)ImportState.Matched ? "Matched" :
					transaction.ImportState == (int)ImportState.Manual ? "Manual" : string.Empty;
			
				<tr>
					<td class="dateCol">@date</td>
					<td class="accntCol">@transaction.Account.Name</td>
					<td class="descCol">@(transaction.Description == string.Empty ? transaction.OriginalDescription : transaction.Description)</td>
					<td class="splitsCol">
						<table class="splitsTable">
							@foreach (var split in transaction.Splits)
							{
								<tr>
									<td class="categoryCol">@split.Category.Name</td>
									<td class="notesCol">@split.Notes</td>
									<td class="subAmtCol">
										@if (transaction.Splits.Count > 1)
										{
											@split.Amount.ToCurrencyString()
										}
									</td>
								</tr>
							}
						</table>
					</td>
					<td class="amtCol">@amount.ToCurrencyString()</td>
					@if (Model.Account != null)
					{
						<td class="balanceCol">@balance.ToCurrencyString()</td>
					}
					<td class="stateCol">@importState</td>
					<td class="cmdCol">
						@Html.ActionLink("Edit", "Edit", "Transactions", new { id = transaction.Id }, null)
					</td>
				</tr>
	  
				balance -= amount;
			}
		</tbody>
	</table>
	<div class="pager">
		@Html.ActionLink("<<", "Index",
			new 
			{
				accountId = Model.Account == null ? 0 : Model.Account.Id,
				startDate = Model.StartDate.ToUrlString(),
				endDate = Model.EndDate.ToUrlString(),
				transactionsPerPage = Model.TransactionsPerPage,
				page = 1
			})
		@Html.ActionLink("<", "Index",
			new 
			{
				accountId = Model.Account == null ? 0 : Model.Account.Id,
				startDate = Model.StartDate.ToUrlString(),
				endDate = Model.EndDate.ToUrlString(),
				transactionsPerPage = Model.TransactionsPerPage,
				page = Model.Page - 1
			})
		@Model.Page of @Model.LastPage
		@Html.ActionLink(">", "Index",
			new 
			{
				accountId = Model.Account == null ? 0 : Model.Account.Id,
				startDate = Model.StartDate.ToUrlString(),
				endDate = Model.EndDate.ToUrlString(),
				transactionsPerPage = Model.TransactionsPerPage,
				page = Model.Page + 1
			})
		@Html.ActionLink(">>", "Index",
			new 
			{
				accountId = Model.Account == null ? 0 : Model.Account.Id,
				startDate = Model.StartDate.ToUrlString(),
				endDate = Model.EndDate.ToUrlString(),
				transactionsPerPage = Model.TransactionsPerPage,
				page = Model.LastPage
			})
	</div>
</div>

<script type="text/javascript">
</script>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryui")
}
